---
title: "Obermayer.Assignment3"
author: "Alyssa Obermayer"
date: "10/5/2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


## **Question 1: Loggerhead Turtle Polulation Dynamics**
## *Part A*

Part A of question one takes the Leslie matrix provided to find the stable growth rate of the population of sea turtles presented. To find this growth rate, I generated a matrix and found the eigenvalues and vectors, then took the absolute value of the largest eigenvalue that RStudio computed, which is shown below as R.
```{r}
#Generating the Leslie Matrix
A <- matrix(c(0,0.675,0,0,0,0,0.703,0.047,0,0,0,0,0.657,0.019,0,4.665,0,0,0.682,0.061,61.896,0,0,0,0.8091), nrow = 5, ncol = 5)

#Find the eigenvalue and vector of the matrix (A)
EVs <- eigen(A)

#Assign largest eigenvalue to big R (Geometric Growth Factor>Stable population growth rate)
R <- abs(eigen(A)$values[1])
R
```

## *Part B*

For Part B of question 1 we want to adjust two different parameters separately to see their affect on growth rate of the sea turtle population. 

The first parameter we are adjusting is increasing the survival rate of the juvenile sea turtles to 100%. To do this I took the P value located in the original matrix, `r A[2,1]` and adjusted it to be 1.000. This signifies that there is a 100% probability that the juvenile sea turtles will grow to the second stage of their life.

The next influence I made on the original matrix was decreasing the large mature clutch size by half. This was done by taking the original clutch size `r A[1,5]` and decreasing it by half.

After these changes were made I generated two new matrices and solved for their new eigenvalues and vectors to find a new growth rate, the largest eigenvalue, for each possibility. These eigenvalues were compared to the original eigenvalues by taking their difference to find which matrix change influence the growth rate the most. In the end it was found that reduction in clutch size by half was show to make the largest difference by decreasing the R value by 0.0293956.
```{r}
#Juvenile Change
#Generate Leslie Matrix with increased survival of juvenile stage to 100%
AJ <- matrix(c(0, 1.000,0,0,0,0,0.703,0.047,0,0,0,0,0.657,0.019,0,4.665,0,0,0.682,0.061,61.896,0,0,0,0.8091), 
             nrow = 5, ncol = 5)

#Find the eigenvalue and vector of the matrix (AJ)
EVsJ <- eigen(AJ)

#Assign largest eigenvalue to big R (Geometric Growth Factor>Stable population growth rate)
RJ <- abs(eigen(AJ)$values[1])
RJ

#Clutch size change
#Decrease clutch size for large mature size class by half
MCS <- (A[1,5]/2)

#Generate Leslie Matrix with large mature size class by half
AC <- matrix(c(0, 0.675,0,0,0,0,0.703,0.047,0,0,0,0,0.657,0.019,0,4.665,0,0,0.682,0.061,30.948,0,0,0,0.8091), 
             nrow = 5, ncol = 5)

#Find the eigenvalue and vector of the matrix (AC)
EVsC <- eigen(AC)

#Assign largest eigenvalue to big R (Geometric Growth Factor>Stable population growth rate)
RC <- abs(eigen(AC)$values[1])
RC

#Find change in new R values from original
ChangeWithRJ <- eval(abs(R-RJ))
ChangeWithRJ
ChangeWithRC <- eval(abs(R-RC))
ChangeWithRC
```

## *Part C*

In Part C we are attempting to achieve positive growth by way of decreasing mortality in stages 4 and 5, or can also be looked at as increasing survivability in stages 4 and 5. With the original eigenvalue, `r R`, being lower than 1, it shows that the population is decreasing over time to its eventual extinction. It is our goal to adjust the surviability of stages 4 and 5 just enough to produce a positive growth rate, some number greater than 1. 

To do this, I generated a "while" loop that takes the original matrix and calculates the R value continuously while extracting the P values of 4 and 5 and incrementally increasing them by 0.01 and then putting them back into the matrix until the R value exceeds 1, and then it stops. Once the R value is greater that 1 I pulled the new, positive growth rate, eigenvalue and presented the new matrix with the adjusted stage 4 and 5 P values. This can be done in much smaller sequential increments if chosen, but my "while" loop ended up increasing the P values by 0.09. This shows that the mortality needs to be reduced by 9% in stage 4 and 5 P values to achieve a positive growth rate.
```{r}
#While loop to find where the largest eigenvalue exceeds 1
AcM <- matrix(c(0,0.675,0,0,0,0,0.703,0.047,0,0,0,0,0.657,0.019,0,4.665,0,0,0.682,0.061,61.896,0,0,0,0.8091), nrow = 5, ncol = 5)
while (abs(eigen(AcM)$values[1]) < 1) {
  AcM[4,4] = (AcM[4,4] + 0.01)
  AcM[5,5] = (AcM[5,5] + 0.01)
}

#Find largest eigenvalue and view new (R>1) matrix
AcMeigen <- eigen(AcM)$values[1]
AcMeigen
print(AcM)

#Find difference between probability of survival in stages 4 & 5 of the original matrix and new (R>1) matrix
diff44 <- abs(A[4,4]-AcM[4,4])
diff55 <- abs(A[5,5]-AcM[5,5])
print(c(diff44, diff55))
```

## *Part D*

Lastly, we want to project the population over 50 years with the new projection matrix to see if the overall population will double with the adjustment made to stages 4 and 5. To do this I defined my variables to be used, created a storage matrix to place each years population projection for each stage, and then ran a "for" loop to continually multiply the new population by the projection matrix for each year over 50 years. I ran the storage matrix to see the population for all stages over time in numbers. Then I took each stage in that storage matrix and graphed it over the 50 years to see the tend. With the overall starting population being 1250 individuals and the overall population after 50 years projected to be just over 8900 individuals, it can be said that the 9% reduction in mortality would more than double the population over 50 years.

Additionally, I decided to try out a package "popbio" that has numerous function to analyze population data. I was able to call the "pop.projection" function with the given matrix, starting population, and projection years, and found similar result to the function I ran and plotted.
```{R}
pMat <- AcM               #Projection matrix to be used
pYears <- 50              #Number of years we are projecting over
n0 <- c(300,800,50,50,50) #Define initial population which was given in the text

StorYears <- matrix(0, nrow = nrow(pMat), ncol = (pYears + 1)) #Storage array for abundances
StorYears[,1] <- n0                                            #Setting initial abundance at year zero
for (t in 2:(pYears + 1)) {                                    #Create loop to project 50 years
  StorYears[,t] <- pMat %*% StorYears[,t-1]                    #Multiplies the projection matrix by the previous years population size
}

StorYears

#Plot population projection over 50 years
plot(StorYears[1,], ylim = c(0, 6000), type = "l", lwd = 2, ylab = "Population", xlab = "Time (years)", main = "Population Projection Over 50 Years", col = "darkorchid2")
lines(StorYears[2,], lwd = 2, ylab = "Population", xlab = "Time (years)", main = "Population Projection Over 50 Years", col = "black")
lines(StorYears[3,], lwd = 2, ylab = "Population", xlab = "Time (years)", main = "Population Projection Over 50 Years", col = "firebrick")
lines(StorYears[4,], lwd = 2, ylab = "Population", xlab = "Time (years)", main = "Population Projection Over 50 Years", col = "orange")
lines(StorYears[5,], lwd = 2, ylab = "Population", xlab = "Time (years)", main = "Population Projection Over 50 Years", col = "forestgreen")

#Compare found numbers to "PopBio" R package
library(popbio)
pop.projection(AcM, c(300,800,50,50,50), 51)
```

## **Question 2: Minimum Viable Population Size**

Question 2 set out to determine the minimum viable population size that an species can start with in an unchanging environment. To find this minimum population we applied a demographic stochasticity model to different starting populations there the function simulates random variation within the population to model the total population over 100 years. Due to this model being randomly generated every time it is calculated I cannot always confidently say which starting population or which set of starting populations will persist over 100 years. Although, throughout the numerous times I have run this simulation via checking code and knitting the starting population size of 128 individuals has been the only one I have not seen go extinct within 100 years yet.

To be transparent, I do wish I had been able to find more resources or ask for assistance in calculating the probability within the function. As the model is on sea turtles, a birthing individual will most likely have more than 1 or 2 offspring per year. If I could have, and maybe in the future, I will look more towards calculating probability of an individual dying or not each year to get a better fit model to the sea turtle population.
```{r}
#Demographic Stochasticity Function
demogstoch <- function(p0,p1,n0,times) {
  n = n0
  for (i in 1:times) { 
    new_n = 0
    if (n[i] == 0) {
      n <- c(n, new_n) #Makes sure population cannot grow from zero
    } else {
      for (j in 1:n[i]) {
        luck = runif(1)
        if (luck < p0) {
          new_n = new_n
        } else {
          if (luck < p0 + p1) {
            new_n = new_n + 1
          } else {
            new_n = new_n + 2}
        }
      }      
      n <- c(n, new_n)
    }
  }
  return(n)
}

#Run function for different starting population
n0.4 <- demogstoch(0.25,0.5,4,100)
n0.8 <- demogstoch(0.25,0.5,8,100)
n0.16 <- demogstoch(0.25,0.5,16,100)
n0.32 <- demogstoch(0.25,0.5,32,100)
n0.64 <- demogstoch(0.25,0.5,64,100)
n0.128 <- demogstoch(0.25,0.5,128,100)

#Plot all models
plot(n0.128,ylim = c(0,max(n0.128)),type = "l",ylab = "Population",xlab = "Time (years)",main = "Demographic Stochasticity Over 100 Years",
     lwd = 2,col = "darkorchid2")
lines(n0.4,ylab = "Population",xlab = "Time (years)",lwd = 2,col = "black")
lines(n0.8,ylab = "Population",xlab = "Time (years)",lwd = 2,col = "firebrick")
lines(n0.16,ylab = "Population",xlab = "Time (years)",lwd = 2,col = "orange")
lines(n0.32,ylab = "Population",xlab = "Time (years)",lwd = 2,col = "goldenrod3")
lines(n0.64,ylab = "Population",xlab = "Time (years)",lwd = 2,col = "forestgreen")
legend("topright",legend=c("4","8","16","32","64","128"),
       text.col = c("black","firebrick","orange","goldenrod3","forestgreen","darkorchid2"),
       lty = 1,col = c("black","firebrick","orange","goldenrod3","forestgreen","darkorchid2"),
       box.lty = 0,lwd = 2, bg = "transparent", text.font = 2)

#Generate data frames to see exact numerical variation from the graph
n0.4df <- data.frame(n0.4)
n0.8df <- data.frame(n0.8)
n0.16df <- data.frame(n0.16)
n0.32df <- data.frame(n0.32)
n0.64df <- data.frame(n0.64)
n0.128df <- data.frame(n0.128)
```

## **Question 3: Logistic Growth with Environmental Variation**

The final question looks at logistic growth of the sea turtle population over discrete time which takes into account the resources available for the population, density, and other variables that can create conditions for a good, bad, or neutral year. 

To start, I generated a basic logistic model with the original R value of `r R`, a carrying capacity of 1000, and a starting population of 2 individuals, and I simulated this over 20 years. Following this, I added possible environmental variation to the logistic model by creating "if/else" statements which would generate random numbers and if those numbers were within certain ranges it would assign them different R values for the specific range they were in. This environmental variation model was run similarly but I gave the function three different R values to choose from; rbad, rgood, and rneut, who's values were (4/5),(5/4),1 respectively.This simulation had a starting population size of 2 and a carrying capacity of 1000 and was also run over 20 years. 

Like the demographic stochacticity model, the environmental variation model (seen in the cyan color on the graph) is run with random numbers and the exact output can vary each time. Overall, it has a very similar form to the basic logistic model, but the variations that are made with the random uniform number generator do not show a trend in constantly being a lower or higher logistic growth rate. This just shows that it can be very difficult to model simulation with so many variables, especially with a variable dealing with mother nature. 
```{r}
#Basic Logistic Model

#Basic Logistic Model Function
logistic <- function(r, k, n0, time){
  n <- n0
    for (t in 1:time){
      nprime <- n[t] + r*n[t]*(k-n[t])/k
      if (nprime < 0) nprime = 0 #Ensures the population cannot bounce back from zero
      n <- c(n, nprime)
    }
  return(n)
}

#Basic Logistic Model Function Values    
logR <- logistic(R,1000,2,20)

#Logistic Model with Environmental Variation

#Logistic Model with Environmental Variation Function    
logistic <- function(rbad, rgood, rneut, k, n0, time){
  n <- n0
    for (t in 1:time){
      if (runif(1) < 0.33) { #Random switch between bad, neutral, and good conditions
        r = rbad
      } else {
        if (0.33 > runif(1) && runif(1) < 0.66) {
          r = rneut
        } else {
          if (runif(1) > 0.66) {
            r = rgood
          }
        }
      }
      nprime <- n[t] + r*n[t]*(k-n[t])/k
      if (nprime < 0) nprime = 0
      n <- c(n, nprime) #Ensures the population cannot bounce back from zero
    }
  return(n)
}

#Logistic Model with Environmental Variation Function Values   
envrlog <- logistic((4/5),(5/4),1,1000,2,20)

#Plotting Basic Logistics Model with and without Environmental Variation
plot(logR,
     type = "l",
     lwd = 2,
     ylab = "Population",
     xlab = "Time (years)", 
     main = "Basic Logistic Model")
lines(envrlog,
     type = "l",
     lwd = 2,
     ylab = "Population",
     xlab = "Time (years)", 
     main = "Logistic Model with Environmental Variation",
     col = "cyan")
legend(12, 200, 
       legend = c("Basic","Environmental Variant"), 
       text.col = c("black","cyan"), 
       lty = 1, 
       lwd = 2, 
       col = c("black","cyan"))
``` 